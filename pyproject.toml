[tool]
[tool.poetry]
name = "dframeio"
version = "0.1.0"
homepage = "https://github.com/chr1st1ank/dframeio"
description = " Read and write dataframes anywhere."
authors = ["Christian Krudewig <chr1st1ank@krudewig-online.de>"]
readme = "README.md"
license =  "Apache-2.0"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
]
packages = [
    { include = "dframeio" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.7.1,<4.0"
pandas = ">=1.0.0,<2.0"
pyarrow = {version = "^4.0.0", optional = true}

[tool.poetry.extras]
pyarrow = ["pyarrow"]

test = [
    "pytest",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "pytest-cov",
    "yamllint"
    ]

dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml"]

doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extension",
    "mkdocs-autorefs"
    ]

[tool.poetry.dev-dependencies]
black  = { version = "20.8b1" }
flake8  = { version = "3.8.4" }
flake8-docstrings = { version = "^1.6.0" }
isort  = { version = "5.6.4" }
mkdocs  = { version = "^1.1.2" }
mkdocs-autorefs = {version = "0.1.1" }
mkdocs-include-markdown-plugin  = { version = "^1.0.0" }
mkdocs-material  = { version = "^6.2.8" }
mkdocs-material-extensions  = { version = "^1.0.1" }
mkdocstrings  = { version = "^0.13.6" }
pip  = { version = "^20.3.1" }
pre-commit = {version = "^2.12.0" }
pyarrow = "^4.0.0"
pytest = "^6.2.4"
pytest-cov  = { version = "2.10.1" }
toml = {version = "^0.10.2" }
tox  = { version = "^3.20.1" }
twine  = { version = "^3.3.0" }
virtualenv  = { version = "^20.2.2" }
pylint = "^2.8.2"
pandera = "^0.6.4"
yamllint = "^1.26.1"
pylint-junit = "^0.3.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.pylint.master]
reports = false
msg-template = "{path}:{line}: {msg_id} ({symbol}) {msg} ({obj})"
load-plugins = [
  "pylint.extensions.docparams",   # Find parameters missing in docstrings
  "pylint.extensions.docstyle",    # Detect wrong docstring formatting
]
disable = [
  "bad-continuation",  # Creates many false positives conflicting with black
  "invalid-name",  # Creates warnings for local single-letter variables
  "fixme",  # Creates warnings for todo items
  "no-else-return",  # Creates refactor result for indented else block; which however might be more readable
  "duplicate-code",  # Unfortunately this gives alerts also for identical function signatures
]

[tool.pylint.design]
max-args = 10  # Maximum number of arguments for functions
max-attributes = 15  # Maximum number of attributes for a class
#
#[TYPECHECK]
## List of members which are set dynamically and missed by pylint inference
## system, and so shouldn't trigger E0201 when accessed.
#generated-members=pytest.*
